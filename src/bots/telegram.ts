import TelegramBot from "node-telegram-bot-api"
import { ChatCompletionRequestMessageRoleEnum } from "openai"

import config from "@root/config"
import { openAIApi } from "@root/index"

import { entities } from "@database/data-source"
import { log, error } from "@helpers/logger"

const bot = new TelegramBot(config.telegramToken, { polling: true })

const stories: { [chatId: number]: Array<string> } = {}

bot.on("message", async msg => {
  const { from, chat, text } = msg
  if (!from || !text) return

  switch (text) {
    case "/start":
      entities.Chat.save({
        id: chat.id,
        username: chat.username,
        first_name: chat.first_name,
        last_name: chat.last_name
      })

      log({ from, action: text })
      bot.sendMessage(chat.id, `–ü—Ä–∏–≤–µ—Ç, —è –î–∑–µ—Ä–∞, —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üå∏ \n–ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚ù§Ô∏è`)
      return

    case "/reset":
      stories[chat.id] = []
      entities.Story.delete({ chat_id: chat.id })

      log({ from, action: text })
      bot.sendMessage(chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –Ø –∑–∞–±—ã–ª–∞ –≤—Å–µ –æ —á–µ–º –º—ã —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏–ª–∏ üßò‚Äç‚ôÄÔ∏è")
      return

    case "/help":
      log({ from, action: text })
      bot.sendMessage(chat.id, "–ï—Å–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —è –Ω–µ –ø—Ä–∏ —á–µ–º ü§™ \n–ü–∏—à–∏ @gazzati")
      return
  }

  try {
    bot.sendChatAction(chat.id, "typing")

    if (!stories[chat.id]) {
      const storiesDB = await entities.Story.find({
        where: { chat_id: chat.id },
        select: ["content"]
      })

      stories[chat.id] = storiesDB.map(story => story.content)
    }

    stories[chat.id].push(text)

    const messages = stories[chat.id].map(message => ({
      role: ChatCompletionRequestMessageRoleEnum.User,
      content: message
    }))

    const response = await openAIApi.createChatCompletion({ model: config.gptModel, messages })
    const result = response.data.choices[0].message?.content as string

    log({ from, message: text, result })

    bot.sendMessage(chat.id, result)
    entities.Story.save({ chat_id: chat.id, content: text })
  } catch (e) {
    error(e)
    bot.sendMessage(chat.id, "–ü—Ä–æ—Å—Ç–∏, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —è –∏—Å–ø—Ä–∞–≤–ª—é—Å—å ü•π")
  }
})
